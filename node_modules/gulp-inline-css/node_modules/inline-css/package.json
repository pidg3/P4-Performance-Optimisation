{
  "name": "inline-css",
  "version": "2.1.0",
  "description": "Inline css into an html file.",
  "main": "index.js",
  "dependencies": {
    "bluebird": "^2.9.25",
    "cheerio": "^0.19.0",
    "css-property": "^1.0.0",
    "css-rules": "^1.0.0",
    "extract-css": "^1.0.0",
    "style-selector": "^1.0.0"
  },
  "scripts": {
    "test": "gulp test",
    "coverage": "istanbul cover _mocha --report html -- -R spec && open coverage/index.html"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jonkemp/inline-css"
  },
  "keywords": [
    "inline",
    "css",
    "html",
    "email"
  ],
  "author": {
    "name": "Jonathan Kemp",
    "email": "kempdogg@gmail.com",
    "url": "http://jonkemp.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jonkemp/inline-css/issues"
  },
  "homepage": "https://github.com/jonkemp/inline-css",
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-jscs": "^3.0.0",
    "gulp-jshint": "^1.9.0",
    "gulp-mocha": "^2.0.0",
    "gulp-util": "^3.0.2",
    "istanbul": "0.3.x",
    "mocha": "^2.1.0",
    "should": "^5.2.0"
  },
  "readme": "# inline-css [![npm](http://img.shields.io/npm/v/inline-css.svg?style=flat)](https://badge.fury.io/js/inline-css) [![Build Status](https://travis-ci.org/jonkemp/inline-css.svg?branch=master)](https://travis-ci.org/jonkemp/inline-css)\n\n[![NPM](https://nodei.co/npm/inline-css.png?downloads=true)](https://nodei.co/npm/inline-css/)\n\n> Inline your CSS properties into the `style` attribute in an html file. Useful for emails.\n\nInspired by the [juice](https://github.com/Automattic/juice) library.\n\n## Why inline-css instead of Juice?\n- Uses [cheerio](https://github.com/cheeriojs/cheerio) instead of jsdom\n- Works on Windows\n- Preserves Doctype\n- Modular\n- Gets your CSS automatically through style and link tags\n- Functions return [A+ compliant](https://promisesaplus.com/) Promises\n\n## How It Works\n\nThis module takes html and inlines the CSS properties into the style attribute.\n\n`/path/to/file.html`:\n```html\n<html>\n<head>\n  <style>\n    p { color: red; }\n  </style>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Test</p>\n</body>\n</html>\n```\n\n`style.css`\n```css\np {\n  text-decoration: underline;\n}\n```\n\nOutput:\n```html\n<html>\n<head>\n</head>\n<body>\n  <p style=\"color: red; text-decoration: underline;\">Test</p>\n</body>\n</html>\n```\n\n## What is this useful for ?\n\n- HTML emails. For a comprehensive list of supported selectors see\n[here](http://www.campaignmonitor.com/css/)\n- Embedding HTML in 3rd-party websites.\n- Performance. Downloading external stylesheets delays the rendering of the page in the browser. Inlining CSS speeds up this process because the browser doesn't have to wait to download an external stylesheet to start rendering the page.\n\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/inline-css)\n\n```\nnpm install --save inline-css\n```\n\n## Usage\n\n```js\nvar inlineCss = require('inline-css');\nvar html = \"<style>div{color:red;}</style><div/>\";\n\ninlineCss(html, options)\n    .then(function(html) { console.log(html); });\n```\n\n## API\n\n### inlineCss(html, options)\n\n\n#### options.extraCss\n\nType: `String`  \nDefault: `\"\"`\n\nExtra css to apply to the file.\n\n\n#### options.applyStyleTags\n\nType: `Boolean`  \nDefault: `true`\n\nWhether to inline styles in `<style></style>`.\n\n\n#### options.applyLinkTags\n\nType: `Boolean`  \nDefault: `true`\n\nWhether to resolve `<link rel=\"stylesheet\">` tags and inline the resulting styles.\n\n\n#### options.removeStyleTags\n\nType: `Boolean`  \nDefault: `true`\n\nWhether to remove the original `<style></style>` tags after (possibly) inlining the css from them.\n\n\n#### options.removeLinkTags\n\nType: `Boolean`  \nDefault: `true`\n\nWhether to remove the original `<link rel=\"stylesheet\">` tags after (possibly) inlining the css from them.\n\n#### options.url\n\nType: `String`  \nDefault: `filePath`\n\nHow to resolve hrefs. **Required**.\n\n#### options.preserveMediaQueries\n\nType: `Boolean`  \nDefault: `false`\n\nPreserves all media queries (and contained styles) within `<style></style>` tags as a refinement when `removeStyleTags` is `true`. Other styles are removed.\n\n#### options.applyWidthAttributes\n\nType: `Boolean`  \nDefault: `false`\n\nWhether to use any CSS pixel widths to create `width` attributes on elements.\n\n#### options.applyTableAttributes\n\nType: `Boolean`  \nDefault: `false`\n\nWhether to apply the `border`, `cellpadding` and `cellspacing` attributes to `table` elements.\n\n## License\n\nMIT Â© [Jonathan Kemp](http://jonkemp.com)\n",
  "readmeFilename": "README.md",
  "_id": "inline-css@2.1.0",
  "dist": {
    "shasum": "cb1e17ef97ba97e7d83dbac91933cb94100c320e"
  },
  "_from": "inline-css@^2.0.0",
  "_resolved": "https://registry.npmjs.org/inline-css/-/inline-css-2.1.0.tgz"
}
